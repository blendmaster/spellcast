// Generated by LiveScript 1.2.0
var WIDTH, HEIGHT, TRANSMISSION_RANGE, INTERFERENCE_RANGE, CARRIER_SENSING_RANGE, alpha, beta, cx, cy, randNodes, initNodes, nodes, recalcEverything, graph, udgLinks, gct, gcr, source, recalcGraph, hull, btree, seen, links, maxDepth, steps, stepIdx, levels, set, actualLevels, trace, schedule, timing, recvSchedule, hcabsSchedule, calcMoreState, doCabs, doHcabs, calcSchedule, drawSchedule, classify, unclassify, colors, drawTrace, DURATION, draw, bindVisible;
WIDTH = document.documentElement.clientWidth - 50;
HEIGHT = 400;
TRANSMISSION_RANGE = 50;
INTERFERENCE_RANGE = 70;
CARRIER_SENSING_RANGE = 90;
alpha = INTERFERENCE_RANGE / TRANSMISSION_RANGE;
beta = CARRIER_SENSING_RANGE / TRANSMISSION_RANGE;
cx = 0.5 * WIDTH;
cy = 0.5 * HEIGHT;
randNodes = function(num){
  var nodes, gen, restarts, nexgen, i$, len$, node, x, y, ct, j$, to$, i, t, init, r, dx, nx, dy, ny, n;
  nodes = [new BNode(cx, cy)];
  gen = [nodes[0]];
  restarts = 0.1;
  gen: for (;;) {
    nexgen = [];
    for (i$ = 0, len$ = gen.length; i$ < len$; ++i$) {
      node = gen[i$], x = node.x, y = node.y;
      ct = Math.atan2(y - cy, x - cx);
      for (j$ = 0, to$ = Math.floor(Math.random() * 2); j$ < to$; ++j$) {
        i = j$;
        t = Math.random() * 2 * Math.PI;
        if (!init && Math.abs(t - ct) < Math.PI) {
          t += Math.PI;
        }
        init = true;
        r = Math.pow(Math.random(), 0.25) * TRANSMISSION_RANGE;
        dx = r * Math.cos(t);
        nx = x + dx;
        dy = r * Math.sin(t);
        ny = y + dy;
        n = new BNode(nx < 0 || nx > WIDTH ? x - dx : nx, ny < 0 || ny > HEIGHT ? y - dy : ny);
        nexgen.push(n);
        nodes.push(n);
        if (nodes.length > num) {
          break gen;
        }
      }
    }
    if (nexgen.length > 0) {
      gen = nexgen;
    }
    if (Math.random() < restarts) {
      restarts *= 0.5;
      gen.push(nodes[0]);
    }
  }
  return nodes;
};
initNodes = [new BNode(cx, cy), new BNode(cx + TRANSMISSION_RANGE - 1, cy), new BNode(cx + TRANSMISSION_RANGE - 1, cy + TRANSMISSION_RANGE - 1), new BNode(cx + TRANSMISSION_RANGE - 1, cy + 2 * TRANSMISSION_RANGE - 2), new BNode(cx + TRANSMISSION_RANGE - 1, cy + 3 * TRANSMISSION_RANGE - 3), new BNode(cx + 2 * TRANSMISSION_RANGE - 2, cy), new BNode(cx + 3 * TRANSMISSION_RANGE - 3, cy), new BNode(cx + 4 * TRANSMISSION_RANGE - 4, cy)];
nodes = randNodes(100);
recalcEverything = function(){
  d3.selectAll('.status').remove();
  d3.selectAll('.pulse').transition().remove();
  unclassify('hover');
  recalcGraph();
  calcMoreState();
  calcSchedule();
  drawSchedule();
  drawTrace();
  draw();
};
document.getElementById('rand').addEventListener('click', function(){
  var num;
  num = document.getElementById('num-rand');
  num = parseInt(num.value, 10);
  nodes = randNodes(num);
  recalcEverything();
});
document.getElementById('cabs').addEventListener('click', recalcEverything);
document.getElementById('hcabs').addEventListener('click', recalcEverything);
recalcGraph = function(){
  graph = unitDiskGraph(TRANSMISSION_RANGE, nodes);
  udgLinks = graphLinks(graph, nodes);
  gct = unitDiskGraph(Math.max(alpha + 1, beta) * TRANSMISSION_RANGE, nodes);
  gcr = unitDiskGraph((2 + Math.max(alpha, beta)) * TRANSMISSION_RANGE, nodes);
  source = nodes[0];
};
recalcGraph();
hull = d3.geom.hull().x(function(it){
  return it.node.x;
}).y(function(it){
  return it.node.y;
});
calcMoreState = function(){
  var ref$, q, children, i$, len$, n;
  ref$ = bfs(source, function(it){
    return graph[it.id];
  }), btree = ref$[0], seen = ref$[1], links = ref$[2], maxDepth = ref$[3];
  steps = [];
  stepIdx = 0;
  levels = [];
  actualLevels = [];
  q = [btree];
  while (q.length > 0) {
    actualLevels.push(q);
    q = [].concat.apply([], q.map(fn$));
    levels.push((levels[levels.length - 1] || []).concat(q));
  }
  levels.reverse();
  set = {};
  q = [btree];
  while (q.length > 0) {
    children = [];
    for (i$ = 0, len$ = q.length; i$ < len$; ++i$) {
      n = q[i$];
      if (!graph[n.node.id].some(fn1$)) {
        set[n.node.id] = n.node;
      }
      children.push.apply(children, n.children);
    }
    q = children;
  }
  function fn$(it){
    return it.children;
  }
  function fn1$(it){
    return set[it.id] != null;
  }
};
doCabs = function(){
  var ref$;
  ref$ = cabs(graph, gcr, gct, btree, set), trace = ref$.trace, schedule = ref$.schedule;
};
doHcabs = function(){
  var ref$;
  ref$ = hcabs(graph, TRANSMISSION_RANGE, alpha, beta, source, nodes), trace = ref$[0], schedule = ref$[1];
};
calcSchedule = function(){
  var ref$;
  if (document.getElementById('cabs').checked) {
    doCabs();
  } else {
    doHcabs();
  }
  ref$ = timingOf(nodes, graph, schedule), timing = ref$[0], recvSchedule = ref$[1];
};
function timingOf(nodes, graph, schedule){
  var timing, res$, i$, len$, node, recvSchedule, i, slice, recv, j$, len1$, transmit, k$, ref$, len2$, nei, that;
  res$ = {};
  for (i$ = 0, len$ = nodes.length; i$ < len$; ++i$) {
    node = nodes[i$];
    res$[node.id] = {
      send: [],
      recv: void 8
    };
  }
  timing = res$;
  timing[source.id].recv = 0;
  recvSchedule = [];
  for (i$ = 0, len$ = schedule.length; i$ < len$; ++i$) {
    i = i$;
    slice = schedule[i$];
    recv = [];
    for (j$ = 0, len1$ = slice.length; j$ < len1$; ++j$) {
      transmit = slice[j$];
      timing[transmit.id].send.push(i);
      for (k$ = 0, len2$ = (ref$ = graph[transmit.id]).length; k$ < len2$; ++k$) {
        nei = ref$[k$];
        timing[nei.id].recv = (that = timing[nei.id].recv) != null ? that < i ? that : i : i;
        if (timing[nei.id].recv === i) {
          recv.push(nei.id);
        }
      }
    }
    recvSchedule.push(recv);
  }
  return [timing, recvSchedule];
}
calcMoreState();
calcSchedule();
drawSchedule = function(){
  var x$;
  x$ = d3.select('#schedule').selectAll('td').data(d3.range(0, schedule.length));
  x$.exit().remove();
  x$.enter().append('td').text(function(it){
    return it;
  });
  x$.on('mouseover', function(it){
    var i$, ref$, len$, n, x$, i, j$;
    for (i$ = 0, len$ = (ref$ = schedule[it]).length; i$ < len$; ++i$) {
      n = ref$[i$];
      x$ = d3.selectAll(".n" + n.id);
      x$.classed('hover', true);
      x$.classed('sending', true);
    }
    for (i$ = 0, len$ = (ref$ = recvSchedule[it]).length; i$ < len$; ++i$) {
      n = ref$[i$];
      d3.selectAll(".n" + n).classed('receiving', true);
    }
    for (i$ = 0; i$ < it; ++i$) {
      i = i$;
      for (j$ = 0, len$ = (ref$ = recvSchedule[i]).length; j$ < len$; ++j$) {
        n = ref$[j$];
        d3.selectAll(".n" + n).classed('received', true);
      }
    }
  });
  x$.on('mouseout', function(it){
    var i$, ref$, len$, n, x$;
    for (i$ = 0, len$ = (ref$ = schedule[it]).length; i$ < len$; ++i$) {
      n = ref$[i$];
      x$ = d3.selectAll(".n" + n.id);
      x$.classed('hover', false);
      x$.classed('sending', false);
    }
    d3.selectAll('.receiving').classed('receiving', false);
    d3.selectAll('.received').classed('received', false);
  });
};
drawSchedule();
classify = function(id, c){
  d3.selectAll(".n" + id).classed(c, true);
};
unclassify = function(c){
  d3.selectAll("." + c).classed(c, false);
};
colors = d3.scale.category20();
drawTrace = function(){
  var x$, y$, z$, z1$;
  x$ = d3.select('#trace').selectAll('tr').data(trace, function(it){
    return it.name;
  });
  x$.exit().remove();
  y$ = x$.enter().append('tr');
  y$.append('th').text(function(it){
    return it.name;
  });
  z$ = x$.selectAll('td').data(function(it){
    return it;
  });
  z$.exit().remove();
  z$.on('mouseout', function(arg$, i){
    unclassify('highlight');
  });
  z1$ = z$.enter().append('td');
  z1$.text(function(it, i, j){
    if (document.getElementById('cabs').checked) {
      if (j === 0) {
        return it;
      } else {
        return '●';
      }
    } else {
      return '●';
    }
  });
  z1$.on('mouseover', function(it, i, j){
    var i$, ref$, len$, node, x$, sub, y$, z$, col, z1$, z2$, sched, z3$, z4$, uninformed, z5$, z6$, z7$, z8$, z9$, z10$, z11$, z12$, u, z13$;
    if (document.getElementById('cabs').checked) {
      d3.select('#handles').classed('unhighlight', true);
      if (!(j === 3 || j === 4)) {
        for (i$ = 0, len$ = (ref$ = actualLevels[i]).length; i$ < len$; ++i$) {
          node = ref$[i$].node;
          classify(node.id, 'highlight');
        }
      }
      switch (j) {
      case 2:
        for (i$ = 0, len$ = (ref$ = trace[2][i]).length; i$ < len$; ++i$) {
          node = ref$[i$];
          classify(node.id, 'cover');
        }
        x$ = d3.selectAll('.range').data(it, function(it){
          return it.id;
        });
        x$.select('.transmission').classed('show', true);
        break;
      case 3:
      case 4:
        sub = trace[3][i];
        d3.select('#udg-links').classed('hide', true);
        d3.select('#links').classed('hide', true);
        y$ = d3.select('#gcr-links').selectAll('.gcr-link').data(sub.links);
        y$.exit().remove();
        z$ = y$.enter().append('line');
        z$.attr('class', 'gcr-link');
        z$.attr({
          x1: function(it){
            return it.source.x;
          },
          x2: function(it){
            return it.target.x;
          },
          y1: function(it){
            return it.source.y;
          },
          y2: function(it){
            return it.target.y;
          }
        });
        col = sub.col;
        z1$ = d3.selectAll('.handle').data(sub.p, function(it){
          return it.id;
        });
        z1$.classed('highlight', true);
        z1$.style('stroke', function(it){
          return colors(col[it.id]);
        });
        z2$ = d3.selectAll('.range').data(sub.p, function(it){
          return it.id;
        });
        z2$.select('.gcr').classed('show', true);
        if (j === 4) {
          sched = it;
          z3$ = d3.selectAll('.handle').data(trace[2][i], function(it){
            return it.id;
          });
          z3$.classed('scheduled', true);
          z3$.style('stroke', function(it){
            var s, i$, ref$, len$, i, slot, j$, len1$, n;
            s = 0;
            for (i$ = 0, len$ = (ref$ = sched).length; i$ < len$; ++i$) {
              i = i$;
              slot = ref$[i$];
              for (j$ = 0, len1$ = slot.length; j$ < len1$; ++j$) {
                n = slot[j$];
                if (n === it) {
                  s = i;
                }
              }
            }
            return colors(s);
          });
          z4$ = d3.selectAll('.range').data(trace[2][i], function(it){
            return it.id;
          });
          z4$.select('.transmission').classed('show', true);
        }
        break;
      case 5:
      case 6:
      case 7:
        uninformed = trace[5][i];
        unclassify('highlight');
        unclassify('cover');
        sub = trace[6][i];
        z5$ = d3.selectAll('.handle').data(sub.p, function(it){
          return it.id;
        });
        z5$.classed('highlight', true);
        z6$ = d3.selectAll('.handle').data(uninformed, function(it){
          return it.id;
        });
        z6$.classed('uninformed', true);
        if (j === 6 || j === 7) {
          d3.select('#udg-links').classed('hide', true);
          d3.select('#links').classed('hide', true);
          z7$ = d3.select('#gct-links').selectAll('.gct-link').data(sub.links);
          z7$.exit().remove();
          z8$ = z7$.enter().append('line');
          z8$.attr('class', 'gct-link');
          z8$.attr({
            x1: function(it){
              return it.source.x;
            },
            x2: function(it){
              return it.target.x;
            },
            y1: function(it){
              return it.source.y;
            },
            y2: function(it){
              return it.target.y;
            }
          });
          col = sub.col;
          z9$ = d3.selectAll('.handle').data(sub.p, function(it){
            return it.id;
          });
          z9$.style('stroke', function(it){
            return colors(col[it.id]);
          });
          sched = it;
          z10$ = d3.selectAll('.range').data(sub.p, function(it){
            return it.id;
          });
          z10$.select('.gct').classed('show', true);
        }
        if (j === 7) {
          z11$ = d3.selectAll('.handle').data(uninformed, function(it){
            return it.id;
          });
          z11$.classed('scheduled', true);
          z11$.style('stroke', function(it){
            var s, i$, ref$, len$, i, slot, j$, len1$, n, k$, ref1$, len2$, nei;
            s = 0;
            for (i$ = 0, len$ = (ref$ = sched).length; i$ < len$; ++i$) {
              i = i$;
              slot = ref$[i$];
              for (j$ = 0, len1$ = slot.length; j$ < len1$; ++j$) {
                n = slot[j$];
                for (k$ = 0, len2$ = (ref1$ = graph[n.id]).length; k$ < len2$; ++k$) {
                  nei = ref1$[k$];
                  if (nei === it) {
                    s = i;
                    break;
                  }
                }
              }
            }
            return colors(s);
          });
          z12$ = d3.selectAll('.range').data(sub.p, function(it){
            return it.id;
          });
          z12$.select('.transmission').classed('show', true);
        }
      }
    } else {
      d3.select('#handles').classed('unhighlight', true);
      for (i$ = 0, len$ = (ref$ = trace[0][i]).length; i$ < len$; ++i$) {
        node = ref$[i$];
        classify(node.id, 'h-highlight');
      }
      switch (j) {
      case 1:
        for (i$ = 0, len$ = it.length; i$ < len$; ++i$) {
          u = it[i$].u;
          classify(u.id, 'order');
        }
        break;
      case 2:
        for (i$ = 0, len$ = (ref$ = trace[1][i]).length; i$ < len$; ++i$) {
          u = ref$[i$].u;
          classify(u.id, 'order');
        }
        z13$ = d3.selectAll('.range').data(it, function(it){
          return it.id;
        });
        z13$.classed('hover', true);
      }
    }
  });
  z1$.on('mouseout', function(arg$, i){
    var x$;
    unclassify('highlight');
    unclassify('h-highlight');
    unclassify('cover');
    unclassify('hover');
    unclassify('order');
    unclassify('hide');
    unclassify('show');
    unclassify('scheduled');
    unclassify('uninformed');
    d3.select('#handles').classed('unhighlight', false);
    d3.select('#gcr-links').selectAll('.gcr-link').remove();
    d3.select('#gct-links').selectAll('.gct-link').remove();
    x$ = d3.selectAll('.handle');
    x$.style('stroke', void 8);
  });
};
drawTrace();
DURATION = 1000;
document.getElementById('anim').addEventListener('click', function(){
  var x$, y$, z$, z1$, z2$, z3$, z4$;
  x$ = d3.select('#pulses').selectAll('.pulses').data(nodes, function(it){
    return it.id;
  });
  x$.exit().remove();
  y$ = x$.enter().append('g');
  y$.attr('class', 'pulses');
  y$.attr('transform', function(arg$){
    var x, y;
    x = arg$.x, y = arg$.y;
    return "translate(" + x + ", " + y + ")";
  });
  z$ = x$.selectAll('.pulse').data(function(d){
    return timing[d.id].send.map(function(it){
      return [it, d.id];
    });
  });
  z$.exit().remove();
  z1$ = z$.enter().append('circle');
  z1$.attr('class', 'pulse');
  z$.attr('r', 0);
  z$.attr('opacity', 1);
  z2$ = z$.transition().duration(DURATION).ease('linear');
  z2$.delay(function(it){
    return DURATION * it[0];
  });
  z2$.attr('r', CARRIER_SENSING_RANGE);
  z2$.attr('opacity', 0);
  z2$.remove();
  z2$.each('start', function(it){
    d3.selectAll(".n" + it[1]).classed('hover', true);
  });
  z2$.each('end', function(it){
    d3.selectAll(".n" + it[1]).classed('hover', false);
  });
  z3$ = d3.select('#stati').selectAll('.status').data(nodes, function(it){
    return it.id;
  });
  z3$.exit().remove();
  z3$.enter().append('circle');
  z3$.attr('r', 0);
  z3$.attr('class', 'status');
  z3$.attr('cx', function(it){
    return it.x;
  });
  z3$.attr('cy', function(it){
    return it.y;
  });
  z4$ = z3$.transition().duration(DURATION / 2).ease('linear');
  z4$.delay(function(it){
    return DURATION * (0 + timing[it.id].recv);
  });
  z4$.attr('r', 5);
  z4$.attr('class', "status received");
});
document.getElementById('clear').addEventListener('click', function(){
  d3.selectAll('.status').remove();
  d3.selectAll('.pulse').transition().remove();
  unclassify('hover');
});
draw = function(){
  var x$, y$, z$, z1$, z2$, z3$, z4$, z5$, z6$, z7$, z8$, z9$, z10$, z11$, z12$, z13$, z14$;
  x$ = d3.select('#field');
  x$.attr({
    width: WIDTH,
    height: HEIGHT
  });
  y$ = x$.select('#ranges').selectAll('.range').data(nodes, function(it){
    return it.id;
  });
  y$.exit().remove();
  z$ = y$.enter().append('g');
  z$.attr('class', function(it){
    return "range n" + it.id;
  });
  z1$ = z$.append('circle');
  z1$.attr('class', 'transmission');
  z1$.attr('r', TRANSMISSION_RANGE);
  z2$ = z$.append('circle');
  z2$.attr('class', 'interference');
  z2$.attr('r', INTERFERENCE_RANGE);
  z3$ = z$.append('circle');
  z3$.attr('class', 'sensing');
  z3$.attr('r', CARRIER_SENSING_RANGE);
  z4$ = z$.append('circle');
  z4$.attr('class', 'gct');
  z4$.attr('r', Math.max(alpha + 1, beta) * TRANSMISSION_RANGE);
  z5$ = z$.append('circle');
  z5$.attr('class', 'gcr');
  z5$.attr('r', (2 + Math.max(alpha, beta)) * TRANSMISSION_RANGE);
  y$.attr('transform', function(arg$){
    var x, y;
    x = arg$.x, y = arg$.y;
    return "translate(" + x + ", " + y + ")";
  });
  z6$ = x$.select('#levels').selectAll('.level').data(levels);
  z6$.exit().remove();
  z7$ = z6$.enter().append('path');
  z7$.attr('class', 'level');
  z6$.attr('d', function(it){
    return "M " + hull(it).map(function(arg$){
      var node, x, y;
      node = arg$.node, x = node.x, y = node.y;
      return x + " " + y;
    }).join('L') + " Z";
  });
  z8$ = x$.select('#handles').selectAll('.handle').data(nodes, function(it){
    return it.id;
  });
  z8$.exit().remove();
  z9$ = z8$.enter().append('circle');
  z9$.attr('class', function(it){
    return "handle n" + it.id;
  });
  z9$.classed('independent', function(it){
    return set[it.id] != null;
  });
  z9$.attr('r', 3);
  z9$.on('mouseover', function(it){
    d3.selectAll(".n" + it.id).classed('hover', true);
  });
  z9$.on('mouseout', function(it){
    d3.selectAll(".n" + it.id).classed('hover', false);
  });
  z8$.attr('cx', function(it){
    return it.x;
  });
  z8$.attr('cy', function(it){
    return it.y;
  });
  z10$ = x$.select('#udg-links').selectAll('.udg-link').data(udgLinks);
  z10$.exit().remove();
  z11$ = z10$.enter().append('line');
  z11$.attr('class', 'udg-link');
  z10$.attr({
    x1: function(it){
      return it.source.x;
    },
    x2: function(it){
      return it.target.x;
    },
    y1: function(it){
      return it.source.y;
    },
    y2: function(it){
      return it.target.y;
    }
  });
  z12$ = x$.select('#links').selectAll('.link').data(links);
  z12$.exit().remove();
  z13$ = z12$.enter().append('line');
  z13$.attr('class', 'link');
  z12$.attr({
    x1: function(it){
      return it.source.x;
    },
    x2: function(it){
      return it.target.x;
    },
    y1: function(it){
      return it.source.y;
    },
    y2: function(it){
      return it.target.y;
    }
  });
  z14$ = document.querySelector(".handle.n" + source.id);
  z14$.classList.add('source');
};
draw();
bindVisible = function(checkbox, el){
  var x$;
  el = document.getElementById(el);
  x$ = document.getElementById(checkbox);
  x$.addEventListener('click', function(){
    if (!this.checked) {
      el.classList.add('really-hide');
    } else {
      el.classList.remove('really-hide');
    }
  });
  if (x$.checked) {
    el.classList.remove('really-hide');
  } else {
    el.classList.add('really-hide');
  }
  return x$;
};
bindVisible('udg', 'udg-links');
bindVisible('bfs', 'links');
bindVisible('hull', 'levels');