// Generated by LiveScript 1.2.0
var range, alpha, beta, tAvoidThresh, rAvoidThresh, dist, nodes, t1, r1, t2, r2, t, links, x$, avoidT, y$, avoidR, tConstraint, rConstraint, tLine, rLine, tText, rText, clipCircle, iCircle, constrain, drag, detectConflicts, draw;
range = {
  transmission: 100,
  interference: 130,
  sensing: 160
};
alpha = range.interference / range.transmission;
beta = range.sensing / range.transmission;
tAvoidThresh = Math.max(alpha + 1, beta) * range.transmission;
rAvoidThresh = (Math.max(alpha, beta) + 2) * range.transmission;
dist = function(a, b){
  return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
};
nodes = [
  t1 = {
    c: 't₁',
    id: 't1',
    x: 100,
    y: 200
  }, r1 = {
    c: 'r₁',
    id: 'r1',
    x: 100,
    y: 300
  }, t2 = {
    c: 't₂',
    id: 't2',
    x: 400,
    y: 200
  }, r2 = {
    c: 'r₂',
    id: 'r2',
    x: 400,
    y: 300
  }
];
t = [t1, t2];
links = [
  {
    source: t1,
    target: r1
  }, {
    source: t2,
    target: r2
  }
];
x$ = avoidT = document.getElementById('avoid-t');
x$.addEventListener('click', function(){
  draw();
});
y$ = avoidR = document.getElementById('avoid-r');
y$.addEventListener('click', function(){
  draw();
});
tConstraint = d3.select('#t-constraint');
rConstraint = d3.select('#r-constraint');
tLine = d3.select('#t-line');
rLine = d3.select('#r-line');
tText = d3.select('#t-text');
rText = d3.select('#r-text');
clipCircle = d3.select('#clip-circle');
iCircle = d3.select('#i-circle');
constrain = function(dragged){
  var i, d, t;
  if (dist(t1, r1) > range.transmission) {
    if (r1 === dragged) {
      i = r1;
      d = t1;
    } else {
      i = t1;
      d = r1;
    }
    t = Math.atan2(d.y - i.y, d.x - i.x);
    d.x = i.x + range.transmission * Math.cos(t);
    d.y = i.y + range.transmission * Math.sin(t);
  }
  if (dist(t2, r2) > range.transmission) {
    if (r2 === dragged) {
      i = r2;
      d = t2;
    } else {
      i = t2;
      d = r2;
    }
    t = Math.atan2(d.y - i.y, d.x - i.x);
    d.x = i.x + range.transmission * Math.cos(t);
    d.y = i.y + range.transmission * Math.sin(t);
  }
  if (avoidT.checked && dist(t1, t2) < tAvoidThresh) {
    if (t1 === dragged) {
      i = t2;
      d = t1;
    } else {
      i = t1;
      d = t2;
    }
    t = Math.atan2(d.y - i.y, d.x - i.x);
    d.x = i.x + tAvoidThresh * Math.cos(t);
    d.y = i.y + tAvoidThresh * Math.sin(t);
  }
  if (avoidR.checked && dist(r1, r2) < rAvoidThresh) {
    if (r1 === dragged) {
      i = r2;
      d = r1;
    } else {
      i = r1;
      d = r2;
    }
    t = Math.atan2(d.y - i.y, d.x - i.x);
    d.x = i.x + rAvoidThresh * Math.cos(t);
    d.y = i.y + rAvoidThresh * Math.sin(t);
  }
};
drag = d3.behavior.drag().origin(function(it){
  return it;
}).on('drag', function(it){
  var ref$;
  it.x = (ref$ = d3.event).x;
  it.y = ref$.y;
  constrain(it);
  draw();
});
detectConflicts = function(){
  r1.conflicted = dist(t2, r1) < range.interference;
  r2.conflicted = dist(t1, r2) < range.interference;
  t1.conflicted = t2.conflicted = dist(t1, t2) < range.sensing;
};
constrain(t1);
draw = function(){
  var x$, y$, z$, z1$, z2$, z3$, z4$, z5$, z6$, z7$, z8$, z9$, z10$, z11$, tdist, trot, rdist, rrot, z12$, z13$;
  detectConflicts();
  x$ = d3.select('#field');
  y$ = x$.select('#ranges').selectAll('.range').data(t);
  z$ = y$.enter().append('g');
  z$.attr('class', function(it){
    return "range " + it.id;
  });
  z1$ = z$.append('circle');
  z1$.attr('class', 'transmission');
  z1$.attr('r', range.transmission);
  z2$ = z$.append('circle');
  z2$.attr('class', 'interference');
  z2$.attr('r', range.interference);
  z3$ = z$.append('circle');
  z3$.attr('class', 'sensing');
  z3$.attr('r', range.sensing);
  y$.attr('transform', function(arg$){
    var x, y;
    x = arg$.x, y = arg$.y;
    return "translate(" + x + ", " + y + ")";
  });
  z4$ = x$.select('#pulses').selectAll('.pulse').data(t);
  z5$ = z4$.enter().append('circle');
  z5$.attr({
    'class': 'pulse',
    r: 50
  });
  z5$.append('animate').attr({
    attributeName: 'r',
    from: 0,
    to: range.sensing,
    begin: 0,
    dur: 3,
    repeatCount: 'indefinite'
  });
  z5$.append('animate').attr({
    attributeName: 'opacity',
    from: 1,
    to: 0,
    begin: 0,
    dur: 3,
    repeatCount: 'indefinite'
  });
  z4$.classed('conflicted', function(it){
    return it.conflicted;
  });
  z4$.attr({
    cx: function(it){
      return it.x;
    },
    cy: function(it){
      return it.y;
    }
  });
  z6$ = x$.select('#links').selectAll('.link').data(links);
  z7$ = z6$.enter().append('line');
  z7$.attr('class', 'link');
  z6$.attr({
    x1: function(it){
      return it.source.x;
    },
    x2: function(it){
      return it.target.x;
    },
    y1: function(it){
      return it.source.y;
    },
    y2: function(it){
      return it.target.y;
    }
  });
  z8$ = x$.select('#handles').selectAll('.handle').data(nodes);
  z9$ = z8$.enter().append('g');
  z9$.attr('class', function(it){
    return "handle " + it.id;
  });
  z10$ = z9$.append('circle');
  z10$.attr({
    r: 5
  });
  z11$ = z9$.append('text');
  z11$.attr({
    x: 5,
    y: -5
  });
  z11$.text(function(it){
    return it.c;
  });
  z9$.call(drag);
  z8$.attr('transform', function(arg$){
    var x, y;
    x = arg$.x, y = arg$.y;
    return "translate(" + x + ", " + y + ")";
  });
  z8$.classed('conflicted', function(it){
    return it.conflicted;
  });
  clipCircle.attr({
    cx: t1.x,
    cy: t1.y,
    r: range.interference
  });
  iCircle.attr({
    cx: t2.x,
    cy: t2.y,
    r: range.interference
  });
  tdist = dist(t1, t2);
  trot = (180 / Math.PI) * Math.atan2(t2.y - t1.y, t2.x - t1.x);
  rdist = dist(r1, r2);
  rrot = (180 / Math.PI) * Math.atan2(r2.y - r1.y, r2.x - r1.x);
  tLine.attr('x2', tdist);
  rLine.attr('x2', rdist);
  tText.attr('x', tdist / 2);
  rText.attr('x', rdist / 2);
  z12$ = tConstraint;
  z12$.style('display', avoidT.checked ? null : 'none');
  z12$.attr('transform', "translate(" + t1.x + ", " + t1.y + ") rotate(" + trot + ")");
  z13$ = rConstraint;
  z13$.style('display', avoidR.checked ? null : 'none');
  z13$.attr('transform', "translate(" + r1.x + ", " + r1.y + ") rotate(" + rrot + ")");
};
draw();